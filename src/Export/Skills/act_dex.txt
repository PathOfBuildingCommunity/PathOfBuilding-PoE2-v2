-- Path of Building
--
-- Active Dexterity skill gems
-- Skill data (c) Grinding Gear Games
--
local skills, mod, flag, skill = ...


#skill AlchemistsBoonPlayer
#startSets
#set AlchemistsBoonPlayer
#flags area aura
statMap = {
	["skill_alchemists_boon_generate_x_charges_for_any_flask_per_minute"] = {
		mod("FlaskChargesGenerated", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura", effectName = "Alchemists Boon" }),
		div = 60,
	},
	--["recovery_from_flasks_applies_to_allies_in_presence_%"] = {
	-- how to apply this in calc perform?
		--mod("FlasksApplyToMinionPercent", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
	--},
},
#baseMod skill("radius", 60)
#mods
#skillEnd

#skill BarragePlayer
#startSets
#set BarragePlayer
#flags spell duration buff
statMap = {
	--["empower_barrage_maximum_cooldown_ms"] = {
		-- how to implement max cooldown?
		--mod("Cooldown", "MAX", nil),
		--div = 1000,
	--},
	["empower_barrage_base_number_of_barrage_repeats"] = {
		-- need to implement BarrageRepeats
		mod("BarrageRepeats", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Barrage" }),
		flag("SequentialProjectiles", { type = "GlobalEffect", effectType = "Buff", effectName = "Barrage" }),
	},
	["empower_barrage_number_of_barrage_repeats_per_frenzy_charge"] = {
		mod("BarrageRepeats", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Barrage" }, { type = "Multiplier", var = "RemovableFrenzyCharge"}),
	},
	["empower_barrage_cooldown_%of_attack_time"] = {
		-- how to set attack time for this cooldown?
	},
	["empower_barrage_damage_-%_final_with_repeated_projectiles"] = {
		mod("BarrageRepeatDamage", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Barrage" }),
		mult = -1
	},
},
#mods
#skillEnd

#skill CombatFrenzyPlayer
#startSets
#set CombatFrenzyPlayer
#flags buff
statMap = {
	["skill_combat_frenzy_x_ms_cooldown"] = {
		mod("CombatFrenzyCooldown", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Combat Frenzy" }),
		div = 1000,
	},
},
#mods
#skillEnd

#skill DetonatingArrowPlayer
preDamageFunc = function(activeSkill, output)
	activeSkill.skillData.hitTimeMultiplier = activeSkill.skillModList:Sum("BASE", activeSkill.skillCfg, "Multiplier:DetonatingArrowStage")
end,
#startSets
#set DetonatingArrowPlayer
#flags attack projectile channelRelease
statMap = {
	["detonating_arrow_all_damage_%_to_gain_as_fire_per_stage"] = {
		mod("DamageGainAsFire", "BASE", nil, 0, 0, { type = "Multiplier", var = "DetonatingArrowStage" }),
	},
	["detonating_arrow_max_number_of_stages"] = {
		mod("Multiplier:DetonatingArrowMaxStages", "BASE", nil),
	},
},
#mods
#set DetonatingArrowExplosionPlayer
#flags attack area channelRelease
statMap = {
	["detonating_arrow_max_number_of_stages"] = {
		mod("Multiplier:DetonatingArrowMaxStages", "BASE", nil),
	},
},
#mods
#skillEnd

#skill ElectrocutingArrowPlayer
#startSets
#set ElectrocutingArrowPlayer
#flags attack projectile
#mods
#skillEnd

#skill EscapeShotPlayer
#startSets
#set EscapeShotPlayer
#flags attack projectile area
#mods
#skillEnd

#skill FreezingSalvoPlayer
#startSets
#set FreezingSalvoPlayer
#flags attack projectile area
#mods
#skillEnd

#skill GasArrowPlayer
#startSets
#set GasArrowPlayer
#flags attack projectile area
#mods
#set GasArrowGasDegenPlayer
#flags attack area duration
#mods
#set GasArrowGasExplosionPlayer
#flags attack area
#mods
#skillEnd

#skill HeraldOfPlaguePlayer
#startSets
#set HeraldOfPlaguePlayer
#flags
statMap = {
	["herald_of_agony_poison_on_enemies_you_kill_spread_to_enemies_within_x"] = {
		mod("PoisonProlifRange", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Herald of Plague" }),
	},
},
#mods
#skillEnd

#skill HeraldOfThunderPlayer
#startSets
#set HeraldOfThunderPlayer
#flags
statMap = {
	["herald_of_thunder_storm_max_hits"] = {
		mod("HeraldOfThunderHits", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Herald of Thunder" }),
	},
},
#mods
#set HeraldOfThunderOnKillPlayer
#flags nonWeaponAttack hit
#mods
#skillEnd

#skill IceShotPlayer
#startSets
#set IceShotPlayer
#flags attack projectile
#mods
#set IceShotShardPlayer
#flags attack projectile
#mods
#skillEnd

#skill LightningArrowPlayer
#startSets
#set LightningArrowPlayer
#flags attack projectile
#mods
#set LightningArrowArcPlayer
#flags attack projectile
#mods
#skillEnd

#skill LightningRodPlayer
#startSets
#set LightningRodPlayer
#flags attack projectile area
#mods
#skillEnd

#skill MagneticSalvoPlayer
#startSets
#set MagneticSalvoPlayer
#flags attack projectile
#mods
#set MagneticSalvoEmpoweredPlayer
#flags attack projectile
#mods
#skillEnd

#skill PlagueBearerPlayer
#startSets
#set PlagueBearerPlayer
#flags
statMap = {
	["plague_bearer_maximum_stored_poison_damage"] = {
		mod("PlagueBearerMaxDamage", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Plague Bearer" }),
	},
},
#mods
#skillEnd

#skill PlagueBearerNovaPlayer
#startSets
#set PlagueBearerNovaPlayer
#flags
#mods
#skillEnd

#skill PoisonBurstArrowPlayer
#startSets
#set PoisonBurstArrowPlayer
#flags attack projectile
#mods
#set PoisonBurstArrowCloudPlayer
#flags attack projectile area
#mods
#skillEnd

#skill RainOfArrowsPlayer
#startSets
#set RainOfArrowsPlayer
#flags attack projectile area
statMap = {
	["rain_of_arrows_projectile_count_multiplier_if_any_frenzy_charge_spent"] = {
		mod("ProjectileNumber", "MORE", nil, 0, 0, { type = "Multiplier", var = "RemovableFrenzyCharge", limit = 1 }),
	},
	["rain_of_arrows_projectile_count_multiplier_per_frenzy_charge"] = {
		mod("ProjectileNumber", "MORE", nil, 0, 0, { type = "Multiplier", var = "RemovableFrenzyCharge" }),
	},
},
#mods
#skillEnd

#skill ShockchainArrowPlayer
#startSets
#set ShockchainArrowPlayer
#flags attack projectile
#mods
#set ShockchainArrowBeamPlayer
#flags attack projectile
#mods
#set ShockchainArrowExplosionPlayer
#flags attack projectile
#mods
#skillEnd

#skill SnipePlayer
preDamageFunc = function(activeSkill, output)
	activeSkill.skillData.hitTimeMultiplier = activeSkill.skillData.channelPercentOfAttackTime
end,
#startSets
#set SnipePlayer
#flags attack projectile channelRelease
#mods
#set SnipeExplosionPlayer
#flags attack projectile area
#baseMod mod("Condition:PerfectTiming", "FLAG", true)
#mods
#skillEnd

#skill SnipersMarkPlayer
#startSets
#set SnipersMarkPlayer
#flags spell duration mark
statMap = {
	["enemy_additional_critical_strike_multiplier_against_self"] = {
		mod("SelfCritMultiplier", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }),
	},
},
#baseMod skill("debuff", true)
#mods
#skillEnd

#skill SpiralVolleyPlayer
#startSets
#set SpiralVolleyPlayer
#flags attack projectile
statMap = {
	["spiral_volley_damage_+%_final_when_frenzy_charges_consumed"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "MultiplierThreshold", var = "RemovableFrenzyCharge", threshold = 1 }),
	},
	["spiral_volley_damage_+%_final_per_frenzy_charge_consumed"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "RemovableFrenzyCharge" }),
	},
	["spiral_volley_X_chains_per_frenzy_charge_consumed"] = {
		mod("ChainCountMax", "BASE", nil, 0, 0, { type = "Multiplier", var = "RemovableFrenzyCharge" }),
	},
},
#mods
#skillEnd

#skill StormcallerArrowPlayer
#startSets
#set StormcallerArrowPlayer
#flags attack projectile
#mods
#set StormcallerArrowBoltPlayer
#flags attack area
#mods
#skillEnd

#skill TornadoShotPlayer
#startSets
#set TornadoShotPlayer
#flags attack projectile area
#mods
#set TornadoShotNovaPlayer
#flags duration area
#baseMod skill("dotIsArea", true)
#mods
#skillEnd

#skill ToxicGrowthPlayer
#startSets
#set ToxicGrowthPlayer
#flags attack projectile area duration
#mods
#skillEnd

#skill VineArrowPlayer
#startSets
#set VineArrowPlayer
#flags attack projectile
#mods
#set VineArrowFlowerPlayer
#flags duration
statMap = {
	["active_skill_base_slow_debuff_movement_speed_+%_final"] = {
		mod("MovementSpeed", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Debuff", effectName = "Vine Arrow"}),
	},
},
#mods
#skillEnd

#skill VoltaicMarkPlayer
#startSets
#set VoltaicMarkPlayer
#flags spell
statMap = {
	["thaumaturgist_mark_enemies_shocked_chance_+%_final"] = {
		mod("EnemyShockChance", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }),
	},
},
#mods
#skillEnd

#skill TriggeredVoltaicMarkNovaPlayer
#startSets
#set TriggeredVoltaicMarkNovaPlayer
#flags attack area
#mods
#skillEnd

#skill WindDancerPlayer
#startSets
#set WindDancerPlayer
#flags
statMap = {
	["wind_dancer_evasion_rating_+%_final_per_stage"] = {
		mod("Evasion", "MORE", nil, 0, 0, { type = "Multiplier", var = "WindDancerStacks", limitVar = "WindDancerStacksLimit" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Wind Dancer"}),
	},
	["wind_dancer_maximum_number_of_stages"] = {
		mod("Multiplier:WindDancerStacksLimit", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Wind Dancer"}),
	},
},
#mods
#skillEnd

#skill TriggeredWindDancerPlayer
#startSets
#set TriggeredWindDancerPlayer
#flags attack area melee
statMap = {
	["wind_dancer_damage_+%_final_per_stage"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "WindDancerStacks", limitVar = "WindDancerStacksLimit" }),
	},
	["wind_dancer_area_of_effect_+%_final_per_stage"] = {
		mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "Multiplier", var = "WindDancerStacks", limitVar = "WindDancerStacksLimit" }),
	},
	["wind_dancer_knockback_+%_final_per_stage"] = {
		mod("EnemyKnockbackDistance", "MORE", nil, 0, 0, { type = "Multiplier", var = "WindDancerStacks", limitVar = "WindDancerStacksLimit" }),
	},
},
#mods
#skillEnd